                             *Notes for Time Complexity*
Time Complexity is defined as the time taken by the algorithm of a code to run.
Time Complexity is directly proportional to the input of the given size.
Generally Time Complexity is of three types

1)Best case(omega)
2)Average case(thetha)
3)Wrost case(BIG OH)

Best Case :In the simple words the codes which has less lines with a full complete meaning in it is known as the best case
Average Case: This is the second best case and denoted as (n+1)/2.
Wrost Case : The name itself indicates that this is a wrost case which consumes more time and a lengthy codes.

For constant time the time complexity is defined as O(1)
for exmaple
for(int 0 to 10){
    print("Hello)
}
this is the constant type where it will print 11 times.

For linear time the time complexity is defined as O(n)
for exmaple
for(int 0 to n){
    print("Hello)
}
this is the linear type where it will print n times.

For Qudratic time complexity is defined as O(n^2)
for exmaple
for(int 0 to n){
    for(int 0 to m){
             print("Hello)
}
}
this is the Quadratic type where it will print n^2 times and Similarly Cubic times (n^3)as well.

If there are nested loops then the time complexities are multiplied as shown above, in the same way if we are using the loops one after the other then they are added to understand this let us take an exmaple
for(int i =0;i<n;i++){
    print("Hi")
}
for(inti=0;i<m;i++){
    print("Hello")
}
Now the time complexity of this program is O(n+m).

We have a rule called 10^8(10 power 8) Where now a days machines are capable to perform a operations 10^8 per second.
In the programs the constraints will be given so accordingly we have to get an idea that which complexities to be used 
1<n<100 => o(n^4)
1<n<400 => O(n^3)
1<n<2000 => O(n^2 * log n)
1<n<10^4 => O(n^2)
1<n<10^6 => O(n log n)
1<n<10^8 => O(n), O(log n)
